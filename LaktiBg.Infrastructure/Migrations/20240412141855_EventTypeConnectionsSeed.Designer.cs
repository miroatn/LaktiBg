// <auto-generated />
using System;
using LaktiBg.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LaktiBg.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240412141855_EventTypeConnectionsSeed")]
    partial class EventTypeConnectionsSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<decimal>("Rating")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "539e62e9-7926-446b-8d9c-92cd370dfde8",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7328f55a-fce3-4990-bc67-446b563dd693",
                            Description = "Admin account",
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Miroslav",
                            LastName = "Atanasov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAELk9wnutQUZ7hx4FO7Fwatrgs5rOIjg39D+NufwgVVRP/UUMTF2MQd0NJpRwzo09Og==",
                            PhoneNumberConfirmed = false,
                            Rating = 7m,
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "af632eeb-d1ae-474f-9fee-c1437f5d2002",
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg"
                        },
                        new
                        {
                            Id = "71368c9b-91fa-4338-bfce-e0921b5324ef",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7d6a8e9c-bcd4-4c03-9f63-2839f159e178",
                            Description = "Hi! I am an normal user account!",
                            Email = "normaluser@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Antonov",
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMALUSER@ABV.BG",
                            NormalizedUserName = "NORMALUSER@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEGwNkPRSKIPNXfjAhjNiTSYrPs6PzOigZWuWsWnstUH0tl4fdyJ7Pj2TcPRVJbQ2Mg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            Rating = 5m,
                            RegistrationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "ac12143a-a75a-4605-85d9-a0931fc32a7e",
                            TwoFactorEnabled = false,
                            UserName = "normaluser@abv.bg"
                        });
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EventId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int?>("MinAgeRequired")
                        .HasColumnType("int");

                    b.Property<int?>("MinRatingRequired")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParticipantsMaxCount")
                        .HasColumnType("int");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 52,
                            CreationDate = new DateTime(2024, 4, 12, 17, 18, 55, 23, DateTimeKind.Local).AddTicks(1790),
                            Description = "Ще ходим до Пловдив да гледаме Дюн 2 в Cinema city с моята кола.",
                            IsDeleted = false,
                            IsFinished = true,
                            IsPublic = true,
                            IsVisible = true,
                            MinRatingRequired = 5,
                            Name = "Дюн 2",
                            OrganizerId = "539e62e9-7926-446b-8d9c-92cd370dfde8",
                            ParticipantsMaxCount = 5,
                            PlaceId = 44,
                            StartDate = new DateTime(2024, 3, 28, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 50,
                            CreationDate = new DateTime(2024, 4, 12, 17, 18, 55, 23, DateTimeKind.Local).AddTicks(1775),
                            Description = "Смятам да почерпя по случай взетия изпит, не приемам не за отговор!",
                            IsDeleted = false,
                            IsFinished = false,
                            IsPublic = true,
                            IsVisible = true,
                            MinRatingRequired = 3,
                            Name = "Хапване на Хепи",
                            OrganizerId = "71368c9b-91fa-4338-bfce-e0921b5324ef",
                            ParticipantsMaxCount = 10,
                            PlaceId = 42,
                            StartDate = new DateTime(2024, 5, 1, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 51,
                            CreationDate = new DateTime(2024, 4, 12, 17, 18, 55, 23, DateTimeKind.Local).AddTicks(1784),
                            Description = "Пет рожденника ще почерпим за рожденните дни, партито започва в 2 на обяд в петък и приключва в неделя. Нощувките се поемат от рождениците",
                            IsDeleted = false,
                            IsFinished = false,
                            IsPublic = true,
                            IsVisible = true,
                            MinRatingRequired = 3,
                            Name = "Събиране по случай петорния рожден ден",
                            OrganizerId = "71368c9b-91fa-4338-bfce-e0921b5324ef",
                            ParticipantsMaxCount = 29,
                            PlaceId = 43,
                            StartDate = new DateTime(2024, 11, 8, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Name = "Месо"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Филм"
                        },
                        new
                        {
                            Id = 6,
                            Name = "За пушачи"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Хижа"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Tуризъм"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Алкохол"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Къща за гости"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Парти"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Домашно парти"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Силна музика"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Веган"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Вегетарианско"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ресторант"
                        });
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.EventTypeConnection", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.HasKey("EventId", "EventTypeId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("EventTypeConnections");

                    b.HasData(
                        new
                        {
                            EventId = 50,
                            EventTypeId = 1
                        },
                        new
                        {
                            EventId = 50,
                            EventTypeId = 3
                        },
                        new
                        {
                            EventId = 50,
                            EventTypeId = 12
                        },
                        new
                        {
                            EventId = 51,
                            EventTypeId = 1
                        },
                        new
                        {
                            EventId = 51,
                            EventTypeId = 3
                        },
                        new
                        {
                            EventId = 51,
                            EventTypeId = 10
                        },
                        new
                        {
                            EventId = 52,
                            EventTypeId = 8
                        });
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Contact")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rating")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 44,
                            Address = "Западна промишлена зонаЗападен, ул. „Перущица“ 8, 4002 Пловдив",
                            Contact = "032 273 000",
                            IsApproved = true,
                            IsPublic = true,
                            Name = "Cinema City Пловдив",
                            OwnerId = "71368c9b-91fa-4338-bfce-e0921b5324ef",
                            Rating = 5m
                        },
                        new
                        {
                            Id = 42,
                            Address = "ул. „Златю Бояджиев“ 2, 4000 Пловдив",
                            Contact = "0700 20 888",
                            IsApproved = true,
                            IsPublic = true,
                            Name = "Happy Bar & Grill",
                            OwnerId = "539e62e9-7926-446b-8d9c-92cd370dfde8",
                            Rating = 5m
                        },
                        new
                        {
                            Id = 43,
                            Address = "Свинова поляна, 5641, град Априлци",
                            Contact = "+359878655666",
                            IsApproved = true,
                            IsPublic = true,
                            Name = "Вила Петра",
                            OwnerId = "71368c9b-91fa-4338-bfce-e0921b5324ef",
                            Rating = 5m
                        });
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.UserFriends", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("UserFriendId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VisitedEventCounter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserFriendId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.UsersEvents", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersEvents");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.Comment", b =>
                {
                    b.HasOne("LaktiBg.Infrastructure.Data.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaktiBg.Infrastructure.Data.Models.Event", "Event")
                        .WithMany("Comments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.Event", b =>
                {
                    b.HasOne("LaktiBg.Infrastructure.Data.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.EventTypeConnection", b =>
                {
                    b.HasOne("LaktiBg.Infrastructure.Data.Models.Event", "Event")
                        .WithMany("Types")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaktiBg.Infrastructure.Data.Models.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.Image", b =>
                {
                    b.HasOne("LaktiBg.Infrastructure.Data.Models.Event", "Event")
                        .WithMany("Images")
                        .HasForeignKey("EventId");

                    b.HasOne("LaktiBg.Infrastructure.Data.Models.Place", "Place")
                        .WithMany("Images")
                        .HasForeignKey("PlaceId");

                    b.HasOne("LaktiBg.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithOne("Avatar")
                        .HasForeignKey("LaktiBg.Infrastructure.Data.Models.Image", "UserId");

                    b.Navigation("Event");

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.UserFriends", b =>
                {
                    b.HasOne("LaktiBg.Infrastructure.Data.Models.ApplicationUser", "UserFriend")
                        .WithMany()
                        .HasForeignKey("UserFriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaktiBg.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserFriend");
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.UsersEvents", b =>
                {
                    b.HasOne("LaktiBg.Infrastructure.Data.Models.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaktiBg.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("FinishedEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LaktiBg.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LaktiBg.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaktiBg.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LaktiBg.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Avatar");

                    b.Navigation("FinishedEvents");

                    b.Navigation("Friends");
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.Event", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Participants");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("LaktiBg.Infrastructure.Data.Models.Place", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
